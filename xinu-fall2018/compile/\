/*  main.c  - main */

#include <xinu.h>

process	main(void) {
	/* Print Welcome Messages */
	welcome();

	/* Lab 1: Test Code */
	// Test Code for 4.1
	int x = 123;
	kprintf("Going to sleep for %d to test xuptime().\n", x);
	sleep(x);
	xminsec_t obj;
	xuptime(&obj);
	kprintf("upmin: %d\n", obj.upmin);
	kprintf("upsec: %d\n", obj.upsec);

	//

	char* rsp;
	__asm__("movl %%esp, %%ebx;"
		: "=b" (rsp)
	);
	kprintf("Address: 0x%08X, Value: 0x%08X\n\n", (uint32)rsp, (uint32)*rsp);

	resume(create(myprogA, 1024, 21, "myprogA", 0));

	__asm__("movl %%esp, %%ebx;"
		: "=b" (rsp)
	);
	kprintf("Address: 0x%08X, Value: 0x%08X\n\n", (uint32)rsp, (uint32)*rsp);

	pid32 p1 = create(myprogA, 1024, 21, "myprogA", 0);
	pid32 p2 = create(myfuncA, 1024, 21, "myfuncA", 1, 456);
	resume(p1);
	resume(p2); 
 
	/*
	   kprintf("\nrevbyteorder_asm(0x12ABCDEF) = 0x%08X\n", revbyteorder_asm(313249263));
	   kprintf("\nrevbyteorder_inline(0x12ABCDEF) = 0x%08X\n", revbyteorder_inline(313249263));
	   kprintf("\nrevbyteorder(0x12ABCDEF) = 0x%08X\n", revbyteorder(313249263));
	   kprintf("\nrevbyteorder_gcc(0x12ABCDEF) = 0x%08X\n", revbyteorder_gcc(313249263));

	   printsegaddress();

	   sleep(123);
	   xminsec_t obj;
	   xuptime(&obj);

	   kprintf("CLKTIME: %d\n", clktime);
	   kprintf("MIN: %d\n", obj.upmin);
	   kprintf("SEC: %d\n", obj.upsec);
	 */

	/* Run the Xinu shell */
	recvclr();
	resume(create(shell, 8192, 50, "shell", 1, CONSOLE));

	/* Wait for shell to exit and recreate it */
	/**
	while (TRUE) {
		receive();
		sleepms(200);
		kprintf("\n\nMain process recreating shell\n\n");
		resume(create(shell, 4096, 20, "shell", 1, CONSOLE));
	}
	return OK;
	**/	
}
